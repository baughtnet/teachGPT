// Define global variables
let assistantId = ''; // Store the assistant ID obtained after creating the assistant
let threadId = ''; // Store the thread ID for ongoing conversation
let fileId = ''; // Store the file ID of the uploaded PDF

// Function to create an Assistant
async function createAssistant() {
    try {
        const response = await fetch('https://api.openai.com/v1/assistants', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer with your actual API key
            },
            body: JSON.stringify({
                name: "PDF Assistant",
                description: "An AI assistant to answer questions about uploaded PDFs.",
                model: "gpt-4-turbo-preview",
                tools: [{ type: "retrieval" }],
            })
        });
        const data = await response.json();
        assistantId = data.id; // Store the assistant ID for future reference
    } catch (error) {
        console.error('Error creating assistant:', error);
    }
}

// Function to create a Thread
async function createThread() {
    try {
        const response = await fetch('https://api.openai.com/v1/threads', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer with your actual API key
            }
        });
        const data = await response.json();
        threadId = data.id; // Store the thread ID for ongoing conversation
    } catch (error) {
        console.error('Error creating thread:', error);
    }
}

// Function to upload a PDF file
async function uploadPDF(file) {
    try {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('purpose', 'assistants');

        const response = await fetch('https://api.openai.com/v1/files', {
            method: 'POST',
            headers: {
                'Authorization': 'Bearer with your actual API key
            },
            body: formData
        });
        const data = await response.json();
        fileId = data.id; // Store the file ID for future reference
    } catch (error) {
        console.error('Error uploading PDF:', error);
    }
}

// Function to ask a question about the PDF
async function askQuestion(question) {
    try {
        const response = await fetch(`https://api.openai.com/v1/threads/${threadId}/messages`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer with your actual API key
            },
            body: JSON.stringify({
                role: 'user',
                content: question,
                file_ids: [fileId] // Attach the PDF file to the question
            })
        });
        // Handle response as needed
    } catch (error) {
        console.error('Error asking question:', error);
    }
}

// Function to run the Assistant on the thread
async function runAssistant() {
    try {
        const response = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer with your actual API key
            },
            body: JSON.stringify({
                assistant_id: assistantId
            })
        });
        // Handle response as needed
    } catch (error) {
        console.error('Error running assistant:', error);
    }
}

// Example usage:
async function main() {
    await createAssistant();
    await createThread();
    const fileInput = document.getElementById('pdfInput').files[0];
    await uploadPDF(fileInput);
    const question = "What is the main idea of this document?";
    await askQuestion(question);
    await runAssistant();
}

// Call the main function to initiate the interaction
main();
